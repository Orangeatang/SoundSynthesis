#pragma once

//////////////////////////////////////////////////////////////////////////
/// Forward Declarations
//////////////////////////////////////////////////////////////////////////

class Quantization;
class CEngine;


//////////////////////////////////////////////////////////////////////////
/// Using
//////////////////////////////////////////////////////////////////////////

using namespace System;


//////////////////////////////////////////////////////////////////////////
/// SoundSynthesisInterface
//////////////////////////////////////////////////////////////////////////

// SoundSynthesisInterface follows the singleton design pattern and is designed to provide
// an interface between the C++ audio effects and C# user interface
public ref class SoundInterface
{
public :

    //////////////////////////////////////////////////////////////////////////

    ~SoundInterface();
    !SoundInterface();

    //////////////////////////////////////////////////////////////////////////

    bool Initialise( IntPtr aWindowHandle, int aWindowWidth, int aWindowHeight );
	void Uninitialise();

    void Update();

    //////////////////////////////////////////////////////////////////////////

    void QuantizeAudioFile( String^ anInputFileName, String^ anOutputFileName, int aSampleRate );
    void PitchShiftAudioFile( String^ anInputFileName, String^ anOutputFileName, double aPitchShiftFactor );

    //////////////////////////////////////////////////////////////////////////

    // singleton accessor
    static property SoundInterface^ Instance
    {
        SoundInterface^ get()
        {
            if( ourInstance == nullptr )
            {
                ourInstance = gcnew SoundInterface();
            }

            return ourInstance;
        }
    }


private :

    //////////////////////////////////////////////////////////////////////////

    SoundInterface();

    //////////////////////////////////////////////////////////////////////////

    CEngine* myEngine;

    //////////////////////////////////////////////////////////////////////////

    static SoundInterface^ ourInstance = nullptr;
};


//////////////////////////////////////////////////////////////////////////